import static org.gradle.api.JavaVersion.VERSION_1_8

plugins {
    id 'biz.aQute.bnd.builder'
    id 'net.corda.plugins.quasar-utils'
    id 'net.corda.plugins.publish-utils'
    id 'com.jfrog.artifactory'
    id 'net.corda.plugins.api-scanner'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.jpa'
    id 'java-library'
}

description 'Corda core'

// required by DJVM and Avian JVM (for running inside the SGX enclave) which only supports Java 8.
targetCompatibility = VERSION_1_8

repositories {
    maven {
        url "$artifactory_contextUrl/corda-dependencies-dev"
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly

    smokeTestCompile.extendsFrom compile
    smokeTestRuntimeOnly.extendsFrom runtimeOnly

    [ runtimeClasspath, testRuntimeClasspath ].forEach { cfg ->
        cfg.resolutionStrategy {
            dependencySubstitution {
                substitute module('org.jetbrains.kotlin:kotlin-stdlib') with module("org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlin_version")
            }
            cacheChangingModulesFor 0, 'seconds'
        }
    }
}

dependencies {

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}"
    testImplementation "junit:junit:$junit_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junit_vintage_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junit_platform_version}"

    testImplementation "commons-fileupload:commons-fileupload:$fileupload_version"

    // Guava: Google test library (collections test suite)
    testImplementation "com.google.guava:guava-testlib:$guava_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    // Hamkrest, for fluent, composable matchers
    testImplementation "com.natpryce:hamkrest:$hamkrest_version"

    // Thread safety annotations
    implementation "com.google.code.findbugs:jsr305:$jsr305_version"

    // SLF4J: commons-logging bindings for a SLF4J back end
    implementation "org.slf4j:jcl-over-slf4j:$slf4j_version"
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    // AssertJ: for fluent assertions for testing
    testImplementation "org.assertj:assertj-core:${assertj_version}"

    // Guava: Google utilities library.
    //test for osgi conflicts
    implementation "com.google.guava:guava:$guava_version"

    // For caches rather than guava
    implementation "com.github.ben-manes.caffeine:caffeine:$caffeine_version"

    // RxJava: observable streams of events.
    implementation "io.reactivex:rxjava:$rxjava_version"
    
    implementation "org.apache.commons:commons-lang3:$commons_lang_version"

    // Java ed25519 implementation. See https://github.com/str4d/ed25519-java/
    implementation "net.i2p.crypto:eddsa:$eddsa_version"

    // Bouncy castle support needed for X509 certificate manipulation
    implementation "org.bouncycastle:bcprov-jdk15on:${bouncycastle_version}"
    implementation "org.bouncycastle:bcpkix-jdk15on:${bouncycastle_version}"

    // JPA 2.2 annotations.
    implementation "javax.persistence:javax.persistence-api:2.2"

    // FastThreadLocal
    implementation "io.netty:netty-common:$netty_version"

    implementation group: "io.github.classgraph", name: "classgraph", version: class_graph_version


    // required to use @Type annotation
    implementation "org.hibernate:hibernate-osgi:$hibernate_version"

    implementation group: 'javax.xml.bind', name: 'jaxb-api-osgi', version: '2.2.7'
    implementation group: 'org.apache.servicemix.bundles', name: 'org.apache.servicemix.bundles.antlr', version: '2.7.7_5'
    implementation group: 'org.apache.servicemix.bundles', name: 'org.apache.servicemix.bundles.dom4j', version: '2.1.1_1'
    //bundle for javax.xml.stream
    implementation group: 'org.apache.servicemix.specs', name: 'org.apache.servicemix.specs.stax-api-1.0', version: '1.9.0'

    implementation group: 'org.osgi', name: 'org.osgi.service.log', version: '1.4.0'


    // Compile corda-core as an OSGi bundle
    compileOnly "org.osgi:osgi.annotation:$osgi_version"
    implementation group: 'org.osgi', name: 'org.osgi.service.component.annotations', version: '1.4.0'
    compileOnly "org.osgi:osgi.core:$osgi_version"
    testImplementation "org.ow2.asm:asm:$asm_version"
    implementation group: 'org.osgi', name: 'org.osgi.service.log', version: '1.4.0'

    // JDK11: required by Quasar at run-time
    testRuntimeOnly "com.esotericsoftware:kryo:$kryo_version"

    testImplementation "com.nhaarman:mockito-kotlin:$mockito_kotlin_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "com.natpryce:hamkrest:$hamkrest_version"
    testImplementation 'org.hamcrest:hamcrest-library:2.1'

}

// TODO Consider moving it to quasar-utils in the future (introduced with PR-1388)
task copyQuasarJar(type: Copy) {
    from configurations.quasar
    into "$project.rootProject.projectDir/lib"
    rename { filename -> "quasar.jar"}
}

jar {
    finalizedBy(copyQuasarJar)
    archiveBaseName = 'corda-core'
    archiveClassifier = ''
}

tasks.named('jar', Jar) {
    bnd """
Bundle-Name: Corda Core OSGi
Bundle-SymbolicName: net.corda.core
Bundle-Activator: net.corda.core.Activator
Import-Package: \
    !net.i2p.crypto.eddsa.math,\
    *
"""
}

configurations {
    testArtifacts.extendsFrom testRuntimeClasspath
}


test{
    maxParallelForks = (System.env.CORDA_CORE_TESTING_FORKS == null) ? 1 :  "$System.env.CORDA_CORE_TESTING_FORKS".toInteger()
}

task testJar(type: Jar) {
    classifier "tests"
    from sourceSets.test.output
}

// quasar exclusions upon agent code instrumentation at run-time
quasar {
    excludePackages.addAll(
            "antlr**",
            "com.codahale**",
            "com.fasterxml.**",
            "com.github.benmanes.caffeine.**",
            "com.google.**",
            "com.lmax.**",
            "com.zaxxer.**",
            "net.bytebuddy**",
            "io.github.classgraph**",
            "io.netty*",
            "liquibase**",
            "net.i2p.crypto.**",
            "nonapi.io.github.classgraph.**",
            "org.apiguardian.**",
            "org.bouncycastle**",
            "org.codehaus.**",
            "org.h2**",
            "org.hibernate**",
            "org.jboss.**",
            "org.objenesis**",
            "org.w3c.**",
            "org.xml**",
            "org.yaml**",
            "rx**")
}

artifacts {
    testArtifacts testJar
    publish testJar
}

scanApi {
    excludeClasses = [
        // Kotlin should probably have declared this class as "synthetic".
        "net.corda.core.Utils\$toFuture\$1\$subscription\$1"
    ]
}

publish {
    name jar.baseName
}
