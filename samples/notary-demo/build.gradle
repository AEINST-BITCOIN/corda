import net.corda.plugins.Cordform

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'

cordapp {
    info {
        name "Corda Notary Demo"
        vendor "R3"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion 1
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    cordaCompile project(':client:rpc')
    // Corda integration dependencies
    cordaRuntime project(path: ":node:capsule", configuration: 'runtimeArtifacts')

    // Cordformation needs a SLF4J implementation when executing the Network
    // Bootstrapper, but Log4J doesn't shutdown completely from within Gradle.
    // Use a much simpler SLF4J implementation here instead.
    cordaRuntime "org.slf4j:slf4j-simple:$slf4j_version"

    // Notary implementations
    cordapp project(':samples:notary-demo:contracts')
    cordapp project(':samples:notary-demo:workflows')
}

def nodeTask = tasks.getByPath(':node:capsule:assemble')
def webTask = tasks.getByPath(':testing:testserver:testcapsule::assemble')

task deployNodes(dependsOn: ['deployNodesSingle', 'deployNodesCustom'])

task deployNodesSingle(type: Cordform, dependsOn: ['jar', nodeTask, webTask]) {
    directory file("$buildDir/nodes/nodesSingle")
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        extraConfig = [h2Settings: [address: "localhost:0"]]
        cordapp project(':samples:notary-demo:contracts')
        cordapp project(':samples:notary-demo:workflows')
        runSchemaMigration = true
    }
    node {
        name "O=Alice Corp,L=Madrid,C=ES"
        p2pPort 10002
        rpcSettings {
            address "localhost:10003"
            adminAddress "localhost:10103"
        }
        rpcUsers = [[user: "demou", password: "demop", permissions: ["ALL"]]]
    }
    node {
        name "O=Notary Node,L=Zurich,C=CH"
        p2pPort 10009
        rpcSettings {
            address "localhost:10010"
            adminAddress "localhost:10110"
        }
        notary = [validating: true,
                  serviceLegalName: "O=Notary Service,L=Zurich,C=CH"
        ]
    }
}

task notarise(type: JavaExec, dependsOn: jar) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.notarydemo.client.NotariseKt'
}
